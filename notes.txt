When the user opens or focuses the room:

await redis.set(`room:${roomId}:unread:${userId}`, 0);

-----------

| Purpose          | Key                         | Value     |
| ---------------- | --------------------------- | --------- |
| Online status    | `user:{userId}:online`      | `true`    |
| Current room     | `user:{userId}:active_room` | `roomId`  |
| Last active time | `user:{userId}:last_seen`   | timestamp |

When user connects:
await redis.set(`user:${userId}:online`, true);

When user disconnects:
await redis.del(`user:${userId}:online`);
await redis.set(`user:${userId}:last_seen`, Date.now());

When user enters a room:
await redis.set(`user:${userId}:active_room`, roomId);

When user leaves or navigates away:
await redis.del(`user:${userId}:active_room`);

How to detect both cases:
const isOnline = await redis.get(`user:${userId}:online`);
const activeRoom = await redis.get(`user:${userId}:active_room`);

const shouldNotify = !isOnline || activeRoom !== currentRoomId;

| Feature                | Redis Key                        | When to Update               |                         |                 |
| ---------------------- | -------------------------------- | ---------------------------- | ----------------------- | --------------- |
| Online status          | `user:{userId}:online`           | On socket connect/disconnect |                         |                 |
| Active room            | `user:{userId}:active_room`      | On entering/exiting room     |                         |                 |
| Unread message count   | `room:{roomId}:unread:{userId}`  | On message send / read       |                         |                 |
| Notification condition | Compare `online` + `active_room` | On message send              |                         |                 |
| Offline detection      | \`!online                        |                              | activeRoom !== roomId\` | On message send |



Bugs:
No join_room event fire when user in room - refresh page 
Send full message as a last message


https://github.com/mendableai/open-lovable









# ---------- 1. Build Stage ----------
FROM node:20 AS builder
WORKDIR /app

# Copy root package.json
COPY package.json ./

# Copy everything
COPY packages ./packages

# Install all deps
RUN npm install

# Build all
RUN npm run build


# ---------- 2. Production Stage ----------
FROM node:20 AS production
WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder /app/packages/server/dist ./packages/server/dist
COPY --from=builder /app/packages/client/dist ./packages/client/dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/packages/server/package*.json ./packages/server/

# Install only production deps
RUN npm install --omit=dev

EXPOSE 3000

CMD ["node", "packages/server/dist/index.js"]
